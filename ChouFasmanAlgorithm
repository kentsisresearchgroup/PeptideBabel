{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Elliot Eton\n",
    "<br>\n",
    "August 2020\n",
    "<br>\n",
    "Contact: eoe4001@med.cornell.edu\n",
    "\n",
    "# Chou-Fasman Algorithm\n",
    "## Predicting the secondary structure of proteins\n",
    "\n",
    "In the 1970s, Peter Y. Chou and Gerald D. Fasman developed a method to predict the secondary structure of proteins from their amino acid sequences. Here, I have translated the Chou-Fasman Algorithm into Python and tested my version of the algorithm on a sample 46-mer peptide."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys, getopt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Initialize and assign preference parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Define preference parameters\n",
    "\n",
    "A preference parameter is defined as the log(observed counts/expected counts). When observed counts = expected counts (i.e., when something occurs as often as one expects), the preference parameter is equal to 0.0.\n",
    "\n",
    "Below, I define the alpha-helix and beta-sheet preference parameters for each of the twenty standard amino acids. Please note that 1.0 was added to each preference parameter, such that when observed counts = expected counts, the preference parameter value is 1.0 (and not 0.0). These values were obtained from the following website: https://swift.cmbi.umcn.nl/teach/aainfo/chou.shtml. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "################ AMINO ACID PARAMETERS ################\n",
    "\n",
    "#preference parameters for alpha helix\n",
    "alpha_pref_params = { \n",
    "    'A': 1.42,\n",
    "    'R': 0.98,\n",
    "    'D': 1.01,\n",
    "    'N': 0.67,\n",
    "    'C': 0.7,\n",
    "    'E': 1.39,\n",
    "    'Q': 1.11,\n",
    "    'G': 0.57,\n",
    "    'H': 1.0,\n",
    "    'I': 1.08,\n",
    "    'L': 1.41,\n",
    "    'K': 1.14,\n",
    "    'M': 1.45,\n",
    "    'F': 1.13,\n",
    "    'P': 0.57,\n",
    "    'S': 0.77,\n",
    "    'T': 0.83,\n",
    "    'W': 1.08,\n",
    "    'Y': 0.69,\n",
    "    'V': 1.06\n",
    "}\n",
    "\n",
    "#preference parameters for beta sheet\n",
    "beta_pref_params = {\n",
    "    'A': 0.83,\n",
    "    'R': 0.93,\n",
    "    'D': 0.54,\n",
    "    'N': 0.89,\n",
    "    'C': 1.19,\n",
    "    'E': 1.17,\n",
    "    'Q': 1.1,\n",
    "    'G': 0.75,\n",
    "    'H': 0.87,\n",
    "    'I': 1.6,\n",
    "    'L': 1.3,\n",
    "    'K': 0.74,\n",
    "    'M': 1.05,\n",
    "    'F': 1.38,\n",
    "    'P': 0.55,\n",
    "    'S': 0.75,\n",
    "    'T': 1.19,\n",
    "    'W': 1.37,\n",
    "    'Y': 1.47,\n",
    "    'V': 1.7\n",
    "}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Initialize the test peptide\n",
    "\n",
    "In their 1989 paper, Peter Prevelige, Jr. and Gerald D. Fasman use the Chou-Fasman algorithm to predict the secondary structure of a 46-mer segment of the Subtilisin BPN' protein, which is an extracellular alkaline serine protease used by *Bacillus amyloliquefaciens*. Because the authors provide the algorithm's output for this peptide, I have chosen to use the same 46-mer segment to test my code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "PEPTIDE = 'AQSVPYGVSQIKAPALHSQGYTGSNVKVAVIDSGIDSSHPDLKVAG'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Assign alpha-helix and beta-sheet preference parameters to each residue of the test peptide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def assign_param(peptide,secondary_structure):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    peptide : callable string\n",
    "        peptide n-mer\n",
    "    secondary_structure : callable string\n",
    "        \"alpha\" or \"beta\"\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    assignment : [n] list of floats\n",
    "        \"alpha\" or \"beta\" preference parameter values\n",
    "            for each of n residues in peptide\n",
    "    '''\n",
    "    \n",
    "    assignment = []\n",
    "    for residue in peptide:\n",
    "        if secondary_structure == 'alpha':\n",
    "            assignment.append(alpha_pref_params[residue])\n",
    "        if secondary_structure == 'beta':\n",
    "            assignment.append(beta_pref_params[residue])\n",
    "    return assignment\n",
    "\n",
    "alpha_assignment = assign_param(PEPTIDE,'alpha')\n",
    "beta_assignment = assign_param(PEPTIDE,'beta')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Identify the nucleation regions for alpha-helices and beta-sheets.\n",
    "\n",
    "Nucleation is a thermodynamic process that involves the formation of a new structure through self-assembly. A nucleation region may or may not define a full alpha-helix or beta-sheet; it is more likely that the nucleation region is just a segment of a larger alpha-helix or beta-sheet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def identify_nucleation_regions(assignment, secondary_structure):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    assignment : output of assign_param function\n",
    "        list of n floats, n = length test peptide\n",
    "    secondary_structure : callable string, \"alpha\" (a) or \"beta\" (b)\n",
    "    \n",
    "    Algorithm\n",
    "    ---------\n",
    "    secondary_structure = alpha\n",
    "        Scan through the peptide and identify regions where \n",
    "        4 out of 6 contiguous residues have P(a-helix) > 1.00. \n",
    "        P refers to preference parameter.\n",
    "        That region is declared a nucleation region for an alpha-helix.\n",
    "    \n",
    "    secondary_structure = beta\n",
    "        Scan through the peptide and identify a region where \n",
    "        3 out of 5 of the residues have a value of P(b-sheet) > 1.00. \n",
    "        P refers to preference parameter.\n",
    "        That region is declared a nucleation region for a beta-sheet.\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    nucleation_regions : list of tuples (start,end)\n",
    "        start = start of nucleation region\n",
    "        end = end+1 of nucleation region\n",
    "        \n",
    "    The nucleation region is easily defined mathematically as [start,end).\n",
    "        Region inclues all numbers from start to end, not including end. \n",
    "    '''\n",
    "    \n",
    "    #Initialize \"checkpoint\" criteria\n",
    "    if secondary_structure == 'alpha':\n",
    "        threshold_num_resi = 4\n",
    "        region_size = 6\n",
    "        param_min = 1.00\n",
    "    if secondary_structure == 'beta':\n",
    "        threshold_num_resi = 3\n",
    "        region_size = 5\n",
    "        param_min = 1.00\n",
    "    \n",
    "    #Iterate through windows in the sequence, taking one step at a time\n",
    "    #Evaluate whether window meets \"checkpoint\" criteria for nucleation regions\n",
    "    #If so, save window as a nucleation region\n",
    "    nucleation_regions = []\n",
    "    start = 0\n",
    "    end = region_size\n",
    "    while end <= len(assignment):\n",
    "        resi_above_param_min = 0\n",
    "        for resi_param in assignment[start:end]:\n",
    "            if resi_param > param_min:\n",
    "                resi_above_param_min += 1\n",
    "        if resi_above_param_min >= threshold_num_resi:\n",
    "            nucleation_regions.append((start,end))\n",
    "        start += 1\n",
    "        end += 1\n",
    "    return nucleation_regions\n",
    "\n",
    "alpha_regions = identify_nucleation_regions(alpha_assignment, 'alpha')\n",
    "beta_regions = identify_nucleation_regions(beta_assignment, 'beta')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Extend the nucleation regions.\n",
    "\n",
    "Extending the nucleation region in both directions allows us to identify the likely start and end points of a full alpha-helix or beta-sheet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extend_regions(assignment,nucleation_regions):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    assignment : output of assign_param function\n",
    "        list of n floats, n = length initialized peptide\n",
    "    nucleation_regions : output of identify_nucleation_regions function \n",
    "        list of tuples\n",
    "    assignment and nucleation_regions should correspond in secondary structure\n",
    "        i.e., if assignment refers to alpha-helix preference parameters, \n",
    "        nucleation_regions should refer to alpha-helix regions\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    Extend the nucleation region in both directions until a \n",
    "    set of four contiguous residues (a tetrapeptide)\n",
    "    that has an average P(secondary structure) < 1.00 is reached.\n",
    "    P(secondary structure) is obtained from the assignment list (function argument).\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    extended_regions : list of tuples (start,end+1)\n",
    "        start = start of extended region\n",
    "        end = end of extended region\n",
    "    '''\n",
    "    #initialize list to be returned by function\n",
    "    extended_regions = []\n",
    "    \n",
    "    for region in nucleation_regions:\n",
    "        N_term_ext = 0 #number of times (i.e. residues) nucleation region extended in N-term direction\n",
    "        C_term_ext = 0 #number of times (i.e. residues) nucleation region extended in C-term direction\n",
    "        \n",
    "        #N-terminal shifting\n",
    "        ##initialize the tetrapeptide\n",
    "        start = region[0]\n",
    "        end = region[0]+4\n",
    "        N_ext =  assignment[start:end]\n",
    "        ##keep extending in N-term direction until either algorithm checkpoint reached\n",
    "        ##or until the peptide's most N-terminal residue is reached\n",
    "        while np.mean(N_ext) >= 1.00:\n",
    "            if start>0:\n",
    "                start -= 1\n",
    "                end -= 1\n",
    "                N_term_ext += 1\n",
    "                N_ext = assignment[start:end]\n",
    "            else:\n",
    "                break\n",
    "                \n",
    "        #C terminal shifting\n",
    "        ##initialize the tetrapeptide\n",
    "        start = region[1]-4\n",
    "        end = region[1]\n",
    "        C_ext = assignment[start:end]\n",
    "        ##keep extending in C-term direction until either algorithm checkpoint reached\n",
    "        ##or until the peptide's most C-terminal residue is reached\n",
    "        while np.mean(C_ext) >= 1.00:\n",
    "            if end <= len(assignment):\n",
    "                start += 1\n",
    "                end += 1\n",
    "                C_term_ext += 1\n",
    "                C_ext = assignment[start:end]\n",
    "            else:\n",
    "                break\n",
    "        \n",
    "        #define the start and end points of the extended region\n",
    "        extended_region_start = region[0]-N_term_ext\n",
    "        extended_region_end = region[1]+C_term_ext\n",
    "        \n",
    "        #to avoid redundancy, check if the extended_regions list already contains the\n",
    "        #tuple defining the range of the extended region; if not, save the tuple\n",
    "        if extended_regions.count((extended_region_start,extended_region_end)) == 0:\n",
    "            extended_regions.append((extended_region_start,extended_region_end))\n",
    "            \n",
    "    return extended_regions\n",
    "\n",
    "alpha_extended_regions = extend_regions(alpha_assignment,alpha_regions)\n",
    "beta_extended_regions = extend_regions(beta_assignment,beta_regions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Declare the secondary structure character of each of the extended nucleation regions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def declare_structure(alpha_assignment,beta_assignment,extended_regions,structure_type):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    alpha_assignment : output of assign_param function when secondary_structure = alpha\n",
    "        list of n floats, n = length initialized peptide\n",
    "    beta_assignment : output of assign_param function when secondary_structure = beta\n",
    "        list of n floats, n = length initialized peptide\n",
    "    extended_regions : output of extend_regions function\n",
    "        list of tuples (start,end), start = start of extended region, end = end of extended region\n",
    "    structure_type : callable string, either \"alpha\" or \"beta\"\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    structure_type = \"alpha\"\n",
    "        if extended region is longer than 5 residues and its average P(a-helix) > P(b-sheet):\n",
    "            assign region as an alpha helix\n",
    "    structure_type = \"beta\"\n",
    "        if extended region has average P(b-sheet) > 1.05 and average P(b-sheet) > P(a-helix):\n",
    "            assign region as a beta sheet\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    structures : array of tuples (start,end+1) \n",
    "        tuple contains the start and end points of a region assigned alpha-helix or beta-sheet character\n",
    "    '''\n",
    "    \n",
    "    structures = []\n",
    "    if structure_type == 'alpha':\n",
    "        for region in extended_regions:\n",
    "            if region[1]-region[0] >= 5:\n",
    "                if np.mean(alpha_assignment[region[0]:region[1]]) > np.mean(beta_assignment[region[0]:region[1]]):\n",
    "                    structures.append((region[0],region[1]))\n",
    "                    \n",
    "    if structure_type == 'beta':\n",
    "        for region in extended_regions:\n",
    "            if np.mean(beta_assignment[region[0]:region[1]]) > 1.05: \n",
    "                if np.mean(beta_assignment[region[0]:region[1]]) > np.mean(alpha_assignment[region[0]:region[1]]):\n",
    "                    structures.append((region[0],region[1]))\n",
    "    return structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(6, 20), (38, 47)]\n"
     ]
    }
   ],
   "source": [
    "helices = declare_structure(alpha_assignment, beta_assignment, alpha_extended_regions,'alpha')\n",
    "print(helices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(21, 34)]\n"
     ]
    }
   ],
   "source": [
    "sheets = declare_structure(alpha_assignment, beta_assignment, beta_extended_regions,'beta')\n",
    "print(sheets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Resolve regions that have dual secondary structure character.\n",
    "\n",
    "The algorithm must address cases in which declared helical and sheet-like regions overlap. Such regions are said to have \"dual secondary structure character,\" as they contain segments that have been doubly assigned to a helical conformation and a sheet-like conformation. While equilibrium is an important concept in protein folding, this algorithm assigns one and only one secondary structure conformation to each region. The folowing steps complete that objective."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.1 Identify unique helices and sheets.\n",
    "\n",
    "This step identifies and and temporarily excludes from further processing in Step 5 any regions that are only declared as a helix or sheet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def intersection(list1,list2):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    list1 : list of objects\n",
    "    list2 : list of objects\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    intersect : list of objects present in both list1 and list2\n",
    "    '''\n",
    "    \n",
    "    intersect = [item for item in list1 if item in list2]\n",
    "    \n",
    "    return intersect\n",
    "\n",
    "\n",
    "def unique(list1,list2):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    list1 : list of tuples, where each tuple corresponds to the range of a declared alpha helix or beta sheet\n",
    "    list2 : list of tuples, wwhere each tuple corresponds to the range of a declared beta sheet or alpha helix\n",
    "    Note that if list1 is an alpha helix, then list2 would be a beta sheet.\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    unique_segments : list of tuples present in list1 that are not in list2\n",
    "    unique_segments will thus contain regions that have fully alpha-helical or beta-sheet character\n",
    "    '''\n",
    "    \n",
    "    unique_segments = []\n",
    "    for region_tuple1 in list1:\n",
    "        flag = 0\n",
    "        #initialize a list of the indeces of the residues that comprise region1\n",
    "        residues_comprising_region1 = list(range(region_tuple1[0],region_tuple1[1]))\n",
    "        \n",
    "        for region_tuple2 in list2:\n",
    "            #initialize a list of the indeces of the residues that comprise region2\n",
    "            residues_comprising_region2 = list(range(region_tuple2[0],region_tuple2[1]))\n",
    "            \n",
    "            #evaluate whether region1 and region2 have overlapping residues\n",
    "            overlapping_segment = intersection(residues_comprising_region1,residues_comprising_region2)\n",
    "            if len(overlapping_segment)>0:\n",
    "                flag+=1 #mark that region1 and region2 do have overlapping residues\n",
    "                \n",
    "        if flag == 0: #in other words, if region1 and region2 do not have overlapping residues\n",
    "            unique_segments.append(region_tuple1) #save the tuple (region1) that is unique to list1\n",
    "    return unique_segments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(6, 20), (38, 47)]\n"
     ]
    }
   ],
   "source": [
    "unique_helices = unique(helices,sheets)\n",
    "print(unique_helices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(21, 34)]\n"
     ]
    }
   ],
   "source": [
    "unique_sheets = unique(sheets,helices)\n",
    "print(unique_sheets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.2 Identify the helices and sheets that remain after the previous step. \n",
    "#### Such identified structures contain segments that have been doubly declared to comprise both helices and sheets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "remaining_helices = sorted(list(set(helices)-set(unique_helices)))\n",
    "remaining_helices #helices with double assignments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "remaining_sheets = sorted(list(set(sheets)-set(unique_sheets)))\n",
    "remaining_sheets #sheets with double assignments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.3 Describe the \"landscape of overlapping segments.\" \n",
    "#### The goal is to take the output from Step 5.2 and describe which sheets overlap with which helices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def identify_overlaps(remaining_helices,remaining_sheets):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    remaining_helices : list of tuples\n",
    "        helices with double secondary structure assignments (helix and sheet)\n",
    "    remaining_sheets : list of tuples\n",
    "        sheets with double secondary structure assignments (helix and sheet)\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    Determines which sheet(s) in remaining_sheets overlap(s) with a given helix\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    overlap : dict of form {index of helix: [index(ces) of sheet(s) that overlap(s) with helix]}\n",
    "    '''\n",
    "    \n",
    "    overlap = {}\n",
    "    i = 0\n",
    "    for helix in remaining_helices:\n",
    "        indeces = []\n",
    "        helix_range = list(range(helix[0],helix[1]))\n",
    "        for sheet in remaining_sheets:\n",
    "            sheet_range = list(range(sheet[0],sheet[1]))\n",
    "            overlapping_segment = intersection(helix_range,sheet_range)\n",
    "            if len(overlapping_segment)>0:\n",
    "                indeces.append(remaining_sheets.index(sheet))\n",
    "        overlap[remaining_helices.index(helix)] = indeces      \n",
    "        i+=1\n",
    "    return overlap\n",
    "\n",
    "\n",
    "overlaps_dict = identify_overlaps(remaining_helices,remaining_sheets)\n",
    "overlaps_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.3 Identify the specfic segments that have double assignments.\n",
    "#### The goal is to break down the output from Step 5.3 even further: \n",
    "#### which specific residues have been assigned both helical and sheet-like character?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overlapping_segments = []\n",
    "for helix in overlaps_dict.keys():\n",
    "    \n",
    "    helix_range = list(range(remaining_helices[helix][0],remaining_helices[helix][1]))\n",
    "    \n",
    "    for sheet in overlaps_dict[helix]:\n",
    "        sheet_range = list(range(remaining_sheets[sheet][0],remaining_sheets[sheet][1]))\n",
    "        \n",
    "        #Identify the overlapping segment\n",
    "        overlapping_segment = intersection(helix_range,sheet_range)\n",
    "        min_resi = min(overlapping_segment)\n",
    "        max_resi = max(overlapping_segment)\n",
    "        \n",
    "        overlapping_segments.append(list(range(min_resi,max_resi+1)))\n",
    "        \n",
    "overlapping_segments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.4 Determine whether doubly-assigned segments have more helical or sheet-like character, and declare segment as such."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "helices_from_osegments = []\n",
    "sheets_from_osegments = []\n",
    "\n",
    "for seg in overlapping_segments:\n",
    "    min_resi = min(seg)\n",
    "    max_resi = max(seg)\n",
    "    \n",
    "    if min_resi == max_resi:\n",
    "        Pa = alpha_assignment[min_resi]\n",
    "        Pb = beta_assignment[min_resi]\n",
    "                    \n",
    "    if min_resi != max_resi:\n",
    "        Pa = np.mean(alpha_assignment[min_resi:max_resi+1])\n",
    "        Pb = np.mean(beta_assignment[min_resi:max_resi+1])\n",
    "    \n",
    "    if Pa>Pb:\n",
    "        helices_from_osegments.append(seg)\n",
    "    \n",
    "    if Pa<Pb:\n",
    "        sheets_from_osegments.append(seg)\n",
    "    \n",
    "    if Pa == Pb:\n",
    "        print('Excluding this segment as cannot differentiate whether it is more helical or sheet-like.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "helices_from_osegments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sheets_from_osegments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.5 Finalize helices and sheets by removing 1. helical segments (from Step 5.4) from declared beta-sheets and 2. sheet-like segments (from Step 5.4) from declared helices. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tool to obtain the objects in list1 that are not in list2.\n",
    "def Diff(list1, list2): \n",
    "    return (list(set(list1) - set(list2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def finalize_structures(unique,remaining,overlapping,alpha_assignment,beta_assignment,structure_type):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    unique : list of tuples\n",
    "        unique_helices or unique_sheets\n",
    "    remaining : list of tuples\n",
    "        remaining_helices or remaining_sheets\n",
    "    overlapping : segments initially declared as the target structure but are now the other structure\n",
    "        sheets_from_osegments or helices_from_osegments\n",
    "    alpha_assignment : list of n floats, n = length test peptide\n",
    "        alpha-helix preference parameters\n",
    "    beta_assignment : list of n floats, n = length test peptide\n",
    "        beta-sheet preference parameters\n",
    "    structure_type : callable string\n",
    "        \"alpha\" or \"beta\"\n",
    "    \n",
    "    Note how if unique and remaining correspond to helices, overlapping corresponds to sheets.\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    Please see comments in text code.\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    final_structures : list of tuples\n",
    "        finalized helices and sheets (condensed)\n",
    "    '''\n",
    "    \n",
    "    #Step 1: reformat remaining from list of tuples to a list of sublists (each sublist contains indeces of residues)\n",
    "    for segment in remaining:\n",
    "        remaining[remaining.index(segment)] = list(range(segment[0],segment[1]))\n",
    "    \n",
    "    #Step 2: subtract residues contained in overlapping from segments contained in remaining\n",
    "    for alt_segment in overlapping:\n",
    "        i = 0\n",
    "        for segment in remaining:\n",
    "            if len(intersection(segment,alt_segment)) > 0:\n",
    "                corrected_seg = sorted(Diff(segment,alt_segment))\n",
    "                remaining[i] = corrected_seg\n",
    "            i += 1\n",
    "            \n",
    "    #Step 3: if the resultant segments in remaining are noncontiguous, then split the segment.\n",
    "    adjusted_remaining = []\n",
    "    for seg in remaining:\n",
    "        flag = 0\n",
    "        splitting_indeces = []\n",
    "        for iv in range(len(seg)-1):\n",
    "            if seg[iv] + 1 != seg[iv+1]:\n",
    "                splitting_indeces.append(iv+1)\n",
    "        split_seg = [seg[i: j] for i, j in zip([0] + splitting_indeces, splitting_indeces + [None])]\n",
    "        for element in split_seg:\n",
    "            adjusted_remaining.append(element)\n",
    "    adjusted_remaining = sorted(adjusted_remaining)\n",
    "\n",
    "    #Step 4: reformat adjust_remaining (list of sublists) to a list of tuples\n",
    "    adjusted_remaining_tuples = []\n",
    "    for element in adjusted_remaining:\n",
    "        adjusted_remaining_tuples.append((min(element),max(element)+1))\n",
    "    \n",
    "    #Step 5: evaluate whether regions in adjusted_remaining_tuples meet\n",
    "    #the criteria for either helices or sheets, and return the satisfactory regions\n",
    "    adjusted_remaining_satisfactory = declare_structure(alpha_assignment,beta_assignment,adjusted_remaining_tuples,structure_type)\n",
    "    \n",
    "    #Step 6: add on unique to adjusted_remaining_satisfactory and sort sublists by tuple's starting value\n",
    "    final_structures = sorted(unique + adjusted_remaining_satisfactory)\n",
    "    \n",
    "    #Step 7: assert that each structure in final_structures satisfies the criteria for helices or sheets\n",
    "    assert final_structures == declare_structure(alpha_assignment,beta_assignment,final_structures,structure_type)\n",
    "    \n",
    "    return final_structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(6, 20), (38, 47)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_helices = finalize_structures(unique_helices,remaining_helices,sheets_from_osegments,alpha_assignment,beta_assignment,'alpha')\n",
    "final_helices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(21, 34)]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_sheets = finalize_structures(unique_sheets,remaining_sheets,helices_from_osegments,alpha_assignment,beta_assignment,'beta')\n",
    "final_sheets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Confirm that algorithm ran as expected and no sheets in final_sheets overlap with any helices in final_helices.\n",
    "def confirm_no_overlaps(helices, sheets):\n",
    "    for helix in helices:\n",
    "        for sheet in sheets:\n",
    "            \n",
    "            helix_range = list(range(helix[0],helix[1]))\n",
    "            sheet_range = list(range(sheet[0],sheet[1]))\n",
    "            \n",
    "            intersection1 = intersection(helix_range,sheet_range)\n",
    "            \n",
    "            if len(intersection1)>0:\n",
    "                print('Error: overlapping segments detected.')\n",
    "\n",
    "confirm_no_overlaps(final_helices,final_sheets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Identify beta-turns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.1 Define beta-turn preference parameters.\n",
    "\n",
    "Below, I define the beta-turn preference parameters for each of the twenty standard amino acids. These values were obtained from the following website: https://swift.cmbi.umcn.nl/teach/aainfo/chou.shtml."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#preference parameters for turn\n",
    "turn_pref_params = {\n",
    "    'A': 0.66,\n",
    "    'R': 0.95,\n",
    "    'D': 1.46,\n",
    "    'N': 1.56,\n",
    "    'C': 1.19,\n",
    "    'E': 0.74,\n",
    "    'Q': 0.98,\n",
    "    'G': 1.56,\n",
    "    'H': 0.95,\n",
    "    'I': 0.47,\n",
    "    'L': 0.59,\n",
    "    'K': 1.01,\n",
    "    'M': 0.6,\n",
    "    'F': 0.6,\n",
    "    'P': 1.52,\n",
    "    'S': 1.43,\n",
    "    'T': 0.96,\n",
    "    'W': 0.96,\n",
    "    'Y': 1.14,\n",
    "    'V': 0.5\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.2 Define beta-turn frequency parameters.\n",
    "\n",
    "Below, I define the beta-turn frequency parameters, which will be used in Step 6.3. These values were obtained from the following website: https://swift.cmbi.umcn.nl/teach/aainfo/chou.shtml."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "fi = {\n",
    "    'A': 0.06,\n",
    "    'R': 0.07,\n",
    "    'D': 0.147,\n",
    "    'N': 0.161,\n",
    "    'C': 0.149,\n",
    "    'E': 0.056,\n",
    "    'Q': 0.074,\n",
    "    'G': 0.102,\n",
    "    'H': 0.14,\n",
    "    'I': 0.043,\n",
    "    'L': 0.061,\n",
    "    'K': 0.055,\n",
    "    'M': 0.068,\n",
    "    'F': 0.059,\n",
    "    'P': 0.102,\n",
    "    'S': 0.12,\n",
    "    'T': 0.086,\n",
    "    'W': 0.077,\n",
    "    'Y': 0.082,\n",
    "    'V': 0.062\n",
    "}\n",
    "\n",
    "fi_1 = {\n",
    "    'A': 0.076,\n",
    "    'R': 0.106,\n",
    "    'D': 0.11,\n",
    "    'N': 0.083,\n",
    "    'C': 0.05,\n",
    "    'E': 0.06,\n",
    "    'Q': 0.098,\n",
    "    'G': 0.085,\n",
    "    'H': 0.047,\n",
    "    'I': 0.034,\n",
    "    'L': 0.025,\n",
    "    'K': 0.115,\n",
    "    'M': 0.082,\n",
    "    'F': 0.041,\n",
    "    'P': 0.301,\n",
    "    'S': 0.139,\n",
    "    'T': 0.108,\n",
    "    'W': 0.013,\n",
    "    'Y': 0.065,\n",
    "    'V': 0.048\n",
    "}\n",
    "\n",
    "fi_2 = {\n",
    "    'A': 0.035,\n",
    "    'R': 0.099,\n",
    "    'D': 0.179,\n",
    "    'N': 0.191,\n",
    "    'C': 0.117,\n",
    "    'E': 0.077,\n",
    "    'Q': 0.037,\n",
    "    'G': 0.19,\n",
    "    'H': 0.093,\n",
    "    'I': 0.013,\n",
    "    'L': 0.036,\n",
    "    'K': 0.072,\n",
    "    'M': 0.014,\n",
    "    'F': 0.065,\n",
    "    'P': 0.034,\n",
    "    'S': 0.125,\n",
    "    'T': 0.065,\n",
    "    'W': 0.064,\n",
    "    'Y': 0.114,\n",
    "    'V': 0.028\n",
    "}\n",
    "\n",
    "fi_3 = {\n",
    "    'A': 0.058,\n",
    "    'R': 0.085,\n",
    "    'D': 0.081,\n",
    "    'N': 0.091,\n",
    "    'C': 0.128,\n",
    "    'E': 0.064,\n",
    "    'Q': 0.098,\n",
    "    'G': 0.152,\n",
    "    'H': 0.054,\n",
    "    'I': 0.056,\n",
    "    'L': 0.07,\n",
    "    'K': 0.095,\n",
    "    'M': 0.055,\n",
    "    'F': 0.065,\n",
    "    'P': 0.068,\n",
    "    'S': 0.106,\n",
    "    'T': 0.079,\n",
    "    'W': 0.167,\n",
    "    'Y': 0.125,\n",
    "    'V': 0.053\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.2 Identify bends at each peptide residue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def assign_pt(peptide):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    peptide : callable string\n",
    "        peptide n-mer\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    To identify a bend at residue number j, calculate the following value\n",
    "    p(t) = f(j)f(j+1)f(j+2)f(j+3) where the f(j+1) value for the j+1 residue is used, \n",
    "    the f(j+2) value for the j+2 residue is used and the f(j+3) value for the j+3 residue is used. \n",
    "    \n",
    "    To describe the preference for a turn at residue number j, we identify that residue's P(t).\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    final_structures : list of tuples\n",
    "        finalized helices and sheets (condensed)\n",
    "    '''\n",
    "\n",
    "    pt = []\n",
    "    turn_parameters = []\n",
    "    for i in range(len(peptide)-3):\n",
    "        #Calculate p(t)\n",
    "        p_t = fi[peptide[i]]*fi_1[peptide[i+1]]*fi_2[peptide[i+2]]*fi_3[peptide[i+3]]\n",
    "        pt.append(p_t)\n",
    "    for residue in peptide:\n",
    "        turn_parameters.append(turn_pref_params[residue])\n",
    "    return pt,turn_parameters\n",
    "\n",
    "pt_prob = assign_pt(PEPTIDE)[0] #probability of turn\n",
    "Pt_pref = assign_pt(PEPTIDE)[1] #preference for a turn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.3 Predict beta-turns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict_turns(initial_param_assign,peptide):\n",
    "    '''\n",
    "    Parameters\n",
    "    ----------\n",
    "    initial_param_assign : list of floats, size (len(peptide)-3)\n",
    "        pt_prob\n",
    "    peptide : callable string\n",
    "        peptide, n-mer\n",
    "        \n",
    "    Algorithm\n",
    "    ---------\n",
    "    Scan through the peptide and identify regions where \n",
    "    4 contiguous residues (a tetrapeptide) have \n",
    "    1. p(t) > 0.000075\n",
    "    2. average P(turn) > 1.00,\n",
    "    3. P(a-helix) < (P(turn) > P(b-sheet)). \n",
    "    When all three criteria are satisfied, the region is declared beta-turn.\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    final_turns : list of tuples\n",
    "        tuples that meet the three conditions for turns\n",
    "    '''\n",
    "    \n",
    "    #define criteria for beta-turns\n",
    "    threshold_num_resi = 4\n",
    "    region_size = 4\n",
    "    param_min = 0.000075\n",
    "    \n",
    "    #checking the first condition\n",
    "    initial_turns = []\n",
    "    start = 0\n",
    "    end = region_size\n",
    "    while end <= len(initial_param_assign):\n",
    "        resi_above_threshold = 0\n",
    "        for prob in initial_param_assign[start:end]:\n",
    "            if prob > param_min:\n",
    "                resi_above_threshold += 1\n",
    "        if resi_above_threshold == threshold_num_resi:\n",
    "            initial_turns.append((start,end))\n",
    "        start += 1\n",
    "        end += 1\n",
    "    \n",
    "    #checking the second and third conditions based on the regions (initial_turns) that satisfied the first condition\n",
    "    final_turns = []\n",
    "    for iturn in initial_turns:\n",
    "        tetrapeptide = peptide[iturn[0]:iturn[1]]\n",
    "        mean_Pturn = np.mean([turn_pref_params[tetrapeptide[0]],turn_pref_params[tetrapeptide[1]],turn_pref_params[tetrapeptide[2]],turn_pref_params[tetrapeptide[3]]])\n",
    "        if mean_Pturn > 1.00:\n",
    "            mean_Pa = np.mean([alpha_pref_params[tetrapeptide[0]],alpha_pref_params[tetrapeptide[1]],alpha_pref_params[tetrapeptide[2]],alpha_pref_params[tetrapeptide[3]]])\n",
    "            mean_Pb = np.mean([beta_pref_params[tetrapeptide[0]],beta_pref_params[tetrapeptide[1]],beta_pref_params[tetrapeptide[2]],beta_pref_params[tetrapeptide[3]]])\n",
    "            if mean_Pa < mean_Pturn > mean_Pb:\n",
    "                final_turns.append(iturn)\n",
    "    return final_turns\n",
    "\n",
    "turns = predict_turns(pt_prob,PEPTIDE)\n",
    "turns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.4 Subtract the residues that comprise beta-turns from helices and sheets, adjust helices and sheets appropriately, and ensure that the resulting helices and sheets satisfy the criteria for such structures.\n",
    "\n",
    "For this step, we can use the finalize_structures function, previously declared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#complete predict_turns again but save output under a different name\n",
    "final_turns = predict_turns(pt_prob,PEPTIDE)\n",
    "#reformat this output to be a list of sublists instead of a list of tuples\n",
    "for turn in final_turns:\n",
    "    final_turns[final_turns.index(turn)] = list(range(turn[0],turn[1]))\n",
    "#feed final_turns (a list of tuples) into finalize_structures\n",
    "final_helices = finalize_structures([],final_helices,final_turns,alpha_assignment,beta_assignment,'alpha')\n",
    "final_sheets = finalize_structures([],final_sheets,final_turns,alpha_assignment,beta_assignment,'beta')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.5 Confirm that no helices, sheets, and turns overlap."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "confirm_no_overlaps(final_helices,final_sheets)\n",
    "confirm_no_overlaps(final_helices,turns)\n",
    "confirm_no_overlaps(final_sheets,turns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Prepare and output data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.1 Reformat how helices, sheets, and turns are stored: from list of tuples to list of sublists of residues."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reformat(list1):\n",
    "    final = []\n",
    "    for segment in list1:\n",
    "        final.append(list(range(segment[0],segment[1])))\n",
    "    residues = [item for sublist in final for item in sublist]\n",
    "    return residues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "turn_residues = reformat(turns)\n",
    "helical_residues = reformat(final_helices)\n",
    "sheet_residues = reformat(final_sheets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.2 Assign secondary structure character to each residue in peptide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_conform_assignment = {}\n",
    "for i in range(len(PEPTIDE)):\n",
    "    if i in helical_residues:\n",
    "        final_conform_assignment[i] = \"a-helix\"\n",
    "    elif i in sheet_residues:\n",
    "        final_conform_assignment[i] = 'b-sheet'\n",
    "    elif i in turn_residues:\n",
    "        final_conform_assignment[i] = 'b-turn'\n",
    "    else:\n",
    "        final_conform_assignment[i] = 'none'\n",
    "\n",
    "structure_assignments_per_residue = list(final_conform_assignment.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.3 Assign amino acids as formers, breakers, and indifferent for helical and B-Sheet regions.\n",
    "\n",
    "H = strong former\n",
    "<br>\n",
    "h = former\n",
    "<br>\n",
    "I = weak former\n",
    "<br>\n",
    "i = indifferent\n",
    "<br>\n",
    "b = breaker\n",
    "<br>\n",
    "B = strong breaker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_fbi = {\n",
    "    'E': 'H',\n",
    "    'M': 'H',\n",
    "    'A': 'H',\n",
    "    'L': 'H',\n",
    "\n",
    "    'K': 'h',\n",
    "    'F': 'h',\n",
    "    'Q': 'h',\n",
    "    'W': 'h',\n",
    "    'I': 'h',\n",
    "    'V': 'h',\n",
    "\n",
    "    'D': 'I',\n",
    "    'H': 'I',\n",
    "\n",
    "    'R': 'i',\n",
    "    'T': 'i',\n",
    "    'S': 'i',\n",
    "    'C': 'i',\n",
    "\n",
    "    'Y': 'b',\n",
    "    'N': 'b',\n",
    "\n",
    "    'G': 'B',\n",
    "    'P': 'B'\n",
    "    }\n",
    "    \n",
    "beta_fbi = {\n",
    "    'V': 'H',\n",
    "    'I': 'H',\n",
    "    'Y': 'H',\n",
    "\n",
    "    'F': 'h',\n",
    "    'W': 'h',\n",
    "    'L': 'h',\n",
    "    'C': 'h',\n",
    "    'T': 'h',\n",
    "    'Q': 'h',\n",
    "    'M': 'h',\n",
    "\n",
    "    'R': 'i',\n",
    "    'N': 'i',\n",
    "    'H': 'i',\n",
    "    'A': 'i',\n",
    "\n",
    "    'S': 'b',\n",
    "    'G': 'b',\n",
    "    'K': 'b',\n",
    "\n",
    "    'P': 'B',\n",
    "    'D': 'B',\n",
    "    'E': 'B'\n",
    "    }\n",
    "\n",
    "alpha_fbi_list = []\n",
    "beta_fbi_list = []\n",
    "for residue in PEPTIDE:\n",
    "    alpha_fbi_list.append(alpha_fbi[residue])\n",
    "    beta_fbi_list.append(beta_fbi[residue])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.4 Calculate average Pa, Pb, and Pt for tetrapeptides in peptide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_means(peptide,structure_type_params):\n",
    "    means = []\n",
    "    for i in range(len(peptide)-3):\n",
    "        avg = np.mean([structure_type_params[peptide[i]],\n",
    "                       structure_type_params[peptide[i+1]],\n",
    "                       structure_type_params[peptide[i+2]],\n",
    "                       structure_type_params[peptide[i+3]]])\n",
    "        means.append(avg)\n",
    "    return means\n",
    "\n",
    "avg_Pa = calculate_means(PEPTIDE,alpha_pref_params)\n",
    "avg_Pb = calculate_means(PEPTIDE,beta_pref_params)\n",
    "avg_Pt = calculate_means(PEPTIDE,turn_pref_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.5 Compile data and calculations into a dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>residue</th>\n",
       "      <th>Pa</th>\n",
       "      <th>Pb</th>\n",
       "      <th>Pt</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>&lt;Pa&gt;</th>\n",
       "      <th>&lt;Pb&gt;</th>\n",
       "      <th>&lt;Pt&gt;</th>\n",
       "      <th>&lt;pt&gt;</th>\n",
       "      <th>structure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.66</td>\n",
       "      <td>H</td>\n",
       "      <td>i</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1.095</td>\n",
       "      <td>0.8925</td>\n",
       "      <td>3.8955e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Q</td>\n",
       "      <td>1.11</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.98</td>\n",
       "      <td>h</td>\n",
       "      <td>h</td>\n",
       "      <td>0.8775</td>\n",
       "      <td>1.025</td>\n",
       "      <td>1.1075</td>\n",
       "      <td>1.95845e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.7725</td>\n",
       "      <td>1.1175</td>\n",
       "      <td>1.1475</td>\n",
       "      <td>2.448e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>V</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>0.7225</td>\n",
       "      <td>1.1175</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0.000323375</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>P</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.52</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>0.7225</td>\n",
       "      <td>1.1175</td>\n",
       "      <td>1.18</td>\n",
       "      <td>6.67641e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Y</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1.14</td>\n",
       "      <td>b</td>\n",
       "      <td>H</td>\n",
       "      <td>0.7725</td>\n",
       "      <td>1.1675</td>\n",
       "      <td>1.1575</td>\n",
       "      <td>2.0687e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>G</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.56</td>\n",
       "      <td>B</td>\n",
       "      <td>b</td>\n",
       "      <td>0.8775</td>\n",
       "      <td>1.075</td>\n",
       "      <td>1.1175</td>\n",
       "      <td>5.9976e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>V</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>1.005</td>\n",
       "      <td>1.2875</td>\n",
       "      <td>0.845</td>\n",
       "      <td>1.78565e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>1.025</td>\n",
       "      <td>1.0475</td>\n",
       "      <td>0.9725</td>\n",
       "      <td>1.45236e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Q</td>\n",
       "      <td>1.11</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.98</td>\n",
       "      <td>h</td>\n",
       "      <td>h</td>\n",
       "      <td>1.1875</td>\n",
       "      <td>1.0675</td>\n",
       "      <td>0.78</td>\n",
       "      <td>1.05068e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>I</td>\n",
       "      <td>1.08</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.47</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0525</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.915</td>\n",
       "      <td>1.17691e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>K</td>\n",
       "      <td>1.14</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.01</td>\n",
       "      <td>h</td>\n",
       "      <td>b</td>\n",
       "      <td>1.1375</td>\n",
       "      <td>0.7375</td>\n",
       "      <td>0.9625</td>\n",
       "      <td>8.24296e-06</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>A</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.66</td>\n",
       "      <td>H</td>\n",
       "      <td>i</td>\n",
       "      <td>1.205</td>\n",
       "      <td>0.8775</td>\n",
       "      <td>0.8575</td>\n",
       "      <td>4.4247e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>P</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.52</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.8875</td>\n",
       "      <td>0.93</td>\n",
       "      <td>1.50699e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>A</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.66</td>\n",
       "      <td>H</td>\n",
       "      <td>i</td>\n",
       "      <td>1.15</td>\n",
       "      <td>0.9375</td>\n",
       "      <td>0.9075</td>\n",
       "      <td>1.4787e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>L</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.59</td>\n",
       "      <td>H</td>\n",
       "      <td>h</td>\n",
       "      <td>1.0725</td>\n",
       "      <td>1.005</td>\n",
       "      <td>0.9875</td>\n",
       "      <td>3.51208e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>H</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0.95</td>\n",
       "      <td>I</td>\n",
       "      <td>i</td>\n",
       "      <td>0.8625</td>\n",
       "      <td>0.8675</td>\n",
       "      <td>1.23</td>\n",
       "      <td>0.000109443</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.785</td>\n",
       "      <td>1.0175</td>\n",
       "      <td>1.2775</td>\n",
       "      <td>0.0002793</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Q</td>\n",
       "      <td>1.11</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.98</td>\n",
       "      <td>h</td>\n",
       "      <td>h</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.1275</td>\n",
       "      <td>1.16</td>\n",
       "      <td>5.66477e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>G</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.56</td>\n",
       "      <td>B</td>\n",
       "      <td>b</td>\n",
       "      <td>0.665</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1.305</td>\n",
       "      <td>6.55044e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Y</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1.14</td>\n",
       "      <td>b</td>\n",
       "      <td>H</td>\n",
       "      <td>0.715</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1.2725</td>\n",
       "      <td>0.00017836</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>T</td>\n",
       "      <td>0.83</td>\n",
       "      <td>1.19</td>\n",
       "      <td>0.96</td>\n",
       "      <td>i</td>\n",
       "      <td>h</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.895</td>\n",
       "      <td>1.3775</td>\n",
       "      <td>8.31512e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>G</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.56</td>\n",
       "      <td>B</td>\n",
       "      <td>b</td>\n",
       "      <td>0.7675</td>\n",
       "      <td>1.0225</td>\n",
       "      <td>1.2625</td>\n",
       "      <td>0.000143524</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.02</td>\n",
       "      <td>1.125</td>\n",
       "      <td>2.64936e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>N</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.89</td>\n",
       "      <td>1.56</td>\n",
       "      <td>b</td>\n",
       "      <td>i</td>\n",
       "      <td>0.9825</td>\n",
       "      <td>1.2575</td>\n",
       "      <td>0.8925</td>\n",
       "      <td>2.949e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>V</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.2425</td>\n",
       "      <td>0.6675</td>\n",
       "      <td>1.15791e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>K</td>\n",
       "      <td>1.14</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.01</td>\n",
       "      <td>h</td>\n",
       "      <td>b</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.2425</td>\n",
       "      <td>0.6675</td>\n",
       "      <td>4.8972e-06</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>V</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>1.155</td>\n",
       "      <td>1.4575</td>\n",
       "      <td>0.5325</td>\n",
       "      <td>7.38842e-06</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>A</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.66</td>\n",
       "      <td>H</td>\n",
       "      <td>i</td>\n",
       "      <td>1.1425</td>\n",
       "      <td>1.1675</td>\n",
       "      <td>0.7725</td>\n",
       "      <td>3.03264e-06</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>V</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.50</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>0.98</td>\n",
       "      <td>1.1475</td>\n",
       "      <td>0.965</td>\n",
       "      <td>3.99972e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>I</td>\n",
       "      <td>1.08</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.47</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>0.8575</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.23</td>\n",
       "      <td>8.987e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>D</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0.54</td>\n",
       "      <td>1.46</td>\n",
       "      <td>I</td>\n",
       "      <td>B</td>\n",
       "      <td>0.8575</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.23</td>\n",
       "      <td>0.000217407</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.8575</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.07406e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>G</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.56</td>\n",
       "      <td>B</td>\n",
       "      <td>b</td>\n",
       "      <td>0.8575</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.23</td>\n",
       "      <td>6.58018e-05</td>\n",
       "      <td>b-sheet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>I</td>\n",
       "      <td>1.08</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.47</td>\n",
       "      <td>h</td>\n",
       "      <td>H</td>\n",
       "      <td>0.9075</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.1975</td>\n",
       "      <td>6.26725e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>D</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0.54</td>\n",
       "      <td>1.46</td>\n",
       "      <td>I</td>\n",
       "      <td>B</td>\n",
       "      <td>0.8875</td>\n",
       "      <td>0.7275</td>\n",
       "      <td>1.3175</td>\n",
       "      <td>0.000137923</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.7775</td>\n",
       "      <td>0.73</td>\n",
       "      <td>1.3325</td>\n",
       "      <td>0.000105484</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>S</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.43</td>\n",
       "      <td>i</td>\n",
       "      <td>b</td>\n",
       "      <td>0.8375</td>\n",
       "      <td>0.6775</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.55326e-05</td>\n",
       "      <td>none</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>H</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0.95</td>\n",
       "      <td>I</td>\n",
       "      <td>i</td>\n",
       "      <td>0.9975</td>\n",
       "      <td>0.815</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.000528014</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>P</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.52</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>1.0325</td>\n",
       "      <td>0.7825</td>\n",
       "      <td>1.145</td>\n",
       "      <td>3.83724e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>D</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0.54</td>\n",
       "      <td>1.46</td>\n",
       "      <td>I</td>\n",
       "      <td>B</td>\n",
       "      <td>1.155</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.89</td>\n",
       "      <td>1.40238e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>L</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.30</td>\n",
       "      <td>0.59</td>\n",
       "      <td>H</td>\n",
       "      <td>h</td>\n",
       "      <td>1.2575</td>\n",
       "      <td>1.1425</td>\n",
       "      <td>0.69</td>\n",
       "      <td>1.13924e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>K</td>\n",
       "      <td>1.14</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.01</td>\n",
       "      <td>h</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0475</td>\n",
       "      <td>1.005</td>\n",
       "      <td>0.9325</td>\n",
       "      <td>1.40448e-05</td>\n",
       "      <td>a-helix</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   residue    Pa    Pb    Pt  a  b    <Pa>    <Pb>    <Pt>         <pt>  \\\n",
       "1        A  1.42  0.83  0.66  H  i    1.09   1.095  0.8925   3.8955e-05   \n",
       "2        Q  1.11  1.10  0.98  h  h  0.8775   1.025  1.1075  1.95845e-05   \n",
       "3        S  0.77  0.75  1.43  i  b  0.7725  1.1175  1.1475    2.448e-05   \n",
       "4        V  1.06  1.70  0.50  h  H  0.7225  1.1175    1.18  0.000323375   \n",
       "5        P  0.57  0.55  1.52  B  B  0.7225  1.1175    1.18  6.67641e-05   \n",
       "6        Y  0.69  1.47  1.14  b  H  0.7725  1.1675  1.1575   2.0687e-05   \n",
       "7        G  0.57  0.75  1.56  B  b  0.8775   1.075  1.1175   5.9976e-05   \n",
       "8        V  1.06  1.70  0.50  h  H   1.005  1.2875   0.845  1.78565e-05   \n",
       "9        S  0.77  0.75  1.43  i  b   1.025  1.0475  0.9725  1.45236e-05   \n",
       "10       Q  1.11  1.10  0.98  h  h  1.1875  1.0675    0.78  1.05068e-05   \n",
       "11       I  1.08  1.60  0.47  h  H  1.0525    0.93   0.915  1.17691e-05   \n",
       "12       K  1.14  0.74  1.01  h  b  1.1375  0.7375  0.9625  8.24296e-06   \n",
       "13       A  1.42  0.83  0.66  H  i   1.205  0.8775  0.8575   4.4247e-05   \n",
       "14       P  0.57  0.55  1.52  B  B     1.1  0.8875    0.93  1.50699e-05   \n",
       "15       A  1.42  0.83  0.66  H  i    1.15  0.9375  0.9075   1.4787e-05   \n",
       "16       L  1.41  1.30  0.59  H  h  1.0725   1.005  0.9875  3.51208e-05   \n",
       "17       H  1.00  0.87  0.95  I  i  0.8625  0.8675    1.23  0.000109443   \n",
       "18       S  0.77  0.75  1.43  i  b   0.785  1.0175  1.2775    0.0002793   \n",
       "19       Q  1.11  1.10  0.98  h  h     0.8  1.1275    1.16  5.66477e-05   \n",
       "20       G  0.57  0.75  1.56  B  b   0.665    1.04   1.305  6.55044e-05   \n",
       "21       Y  0.69  1.47  1.14  b  H   0.715    1.04  1.2725   0.00017836   \n",
       "22       T  0.83  1.19  0.96  i  h    0.71   0.895  1.3775  8.31512e-05   \n",
       "23       G  0.57  0.75  1.56  B  b  0.7675  1.0225  1.2625  0.000143524   \n",
       "24       S  0.77  0.75  1.43  i  b    0.91    1.02   1.125  2.64936e-05   \n",
       "25       N  0.67  0.89  1.56  b  i  0.9825  1.2575  0.8925    2.949e-05   \n",
       "26       V  1.06  1.70  0.50  h  H    1.17  1.2425  0.6675  1.15791e-05   \n",
       "27       K  1.14  0.74  1.01  h  b    1.17  1.2425  0.6675   4.8972e-06   \n",
       "28       V  1.06  1.70  0.50  h  H   1.155  1.4575  0.5325  7.38842e-06   \n",
       "29       A  1.42  0.83  0.66  H  i  1.1425  1.1675  0.7725  3.03264e-06   \n",
       "30       V  1.06  1.70  0.50  h  H    0.98  1.1475   0.965  3.99972e-05   \n",
       "31       I  1.08  1.60  0.47  h  H  0.8575    0.91    1.23    8.987e-05   \n",
       "32       D  1.01  0.54  1.46  I  B  0.8575    0.91    1.23  0.000217407   \n",
       "33       S  0.77  0.75  1.43  i  b  0.8575    0.91    1.23  1.07406e-05   \n",
       "34       G  0.57  0.75  1.56  B  b  0.8575    0.91    1.23  6.58018e-05   \n",
       "35       I  1.08  1.60  0.47  h  H  0.9075    0.91  1.1975  6.26725e-05   \n",
       "36       D  1.01  0.54  1.46  I  B  0.8875  0.7275  1.3175  0.000137923   \n",
       "37       S  0.77  0.75  1.43  i  b  0.7775    0.73  1.3325  0.000105484   \n",
       "38       S  0.77  0.75  1.43  i  b  0.8375  0.6775    1.34  1.55326e-05   \n",
       "39       H  1.00  0.87  0.95  I  i  0.9975   0.815    1.13  0.000528014   \n",
       "40       P  0.57  0.55  1.52  B  B  1.0325  0.7825   1.145  3.83724e-05   \n",
       "41       D  1.01  0.54  1.46  I  B   1.155    1.07    0.89  1.40238e-05   \n",
       "42       L  1.41  1.30  0.59  H  h  1.2575  1.1425    0.69  1.13924e-05   \n",
       "43       K  1.14  0.74  1.01  h  b  1.0475   1.005  0.9325  1.40448e-05   \n",
       "\n",
       "   structure  \n",
       "1       none  \n",
       "2       none  \n",
       "3       none  \n",
       "4       none  \n",
       "5       none  \n",
       "6       none  \n",
       "7    a-helix  \n",
       "8    a-helix  \n",
       "9    a-helix  \n",
       "10   a-helix  \n",
       "11   a-helix  \n",
       "12   a-helix  \n",
       "13   a-helix  \n",
       "14   a-helix  \n",
       "15   a-helix  \n",
       "16   a-helix  \n",
       "17   a-helix  \n",
       "18   a-helix  \n",
       "19   a-helix  \n",
       "20   a-helix  \n",
       "21      none  \n",
       "22   b-sheet  \n",
       "23   b-sheet  \n",
       "24   b-sheet  \n",
       "25   b-sheet  \n",
       "26   b-sheet  \n",
       "27   b-sheet  \n",
       "28   b-sheet  \n",
       "29   b-sheet  \n",
       "30   b-sheet  \n",
       "31   b-sheet  \n",
       "32   b-sheet  \n",
       "33   b-sheet  \n",
       "34   b-sheet  \n",
       "35      none  \n",
       "36      none  \n",
       "37      none  \n",
       "38      none  \n",
       "39   a-helix  \n",
       "40   a-helix  \n",
       "41   a-helix  \n",
       "42   a-helix  \n",
       "43   a-helix  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\n",
    "    'residue': list(PEPTIDE), \n",
    "    'Pa': alpha_assignment, \n",
    "    'Pb': beta_assignment, \n",
    "    'Pt': Pt_pref,\n",
    "    'a' : alpha_fbi_list,\n",
    "    'b' : beta_fbi_list,\n",
    "    #The N/A array is required for creation of the dataframe\n",
    "    #Because the last three residues of the peptide cannot initiate a tetrapeptide\n",
    "    ##one cannot calculate <Pa>, <Pb>, <Pt>, and <pt> across a tetrapeptide.\n",
    "    '<Pa>': avg_Pa+['N/A','N/A','N/A'],\n",
    "    '<Pb>': avg_Pb+['N/A','N/A','N/A'],\n",
    "    '<Pt>': avg_Pt+['N/A','N/A','N/A'],\n",
    "    '<pt>': pt_prob+['N/A','N/A','N/A'],\n",
    "    'structure': structure_assignments_per_residue\n",
    "    }\n",
    "    \n",
    "df = pd.DataFrame.from_dict(data)\n",
    "df.index += 1\n",
    "\n",
    "#Display a dataframe that excludes the last three rows\n",
    "#(these last three residues can't initiate a tetrapeptide)\n",
    "#(excludes the rows that would contain N/A)\n",
    "df = df[0:len(avg_Pa)]\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.6 Save dataframe to Excel.\n",
    "\n",
    "Please uncomment the following cell if you'd like to output the excel file. (I didn't want you to have to save another file if you didn't want to.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.to_excel('Chou_Fas_output.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please compare the dataframe (either here in Jupyter notebook or in the Excel file, if you choose to export it) to Figure 2 in Prevelige & Fasman (1989). As you'll find, the figures are nearly identical, suggesting that my code successfully replicated the Chou-Fasman Algorithm. The two differences between my dataframe and Figure 2 are\n",
    "<br>\n",
    "1. the magnitude of Pa, Pb, Pt, $\\lt$Pa$\\gt$,$\\lt$Pb$\\gt$, and $\\lt$Pt$\\gt$,\n",
    "2. the additional column describing the secondary structure assignment (per residue).\n",
    "\n",
    "These differences are intentional.\n",
    "\n",
    "1. The preference parameters were defined in my code as 1+log(observed counts/expected counts) and are 100-fold smaller than those defined in the 1989 paper. My preference parameters are of a more appropriate magnitude and consistent with more recent Chou-Fasman analyses (see https://swift.cmbi.umcn.nl/teach/aainfo/chou.shtml).\n",
    "\n",
    "2. The additional column describes the ultimate endpoint in Chou-Fasman analyses: the secondary structure assignment. These assignments are not displayed in Figure 2 of the 1989 paper, but I thought they would be useful to provide here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Bonus: Plot data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fa024fe2710>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(1, figsize=(20, 10))\n",
    "plt.plot(df.index,df['<Pa>'],'r',label=\"<Pa>\",marker='o')\n",
    "plt.plot(df.index,df['<Pb>'],'b',label='<Pb>',marker='o')\n",
    "plt.plot(df.index,df['<Pt>'],'g',label='<Pt>',marker='o')\n",
    "plt.xticks(ticks=df.index, labels=df['residue'],fontsize=20);\n",
    "plt.yticks(fontsize=20)\n",
    "plt.xlabel(\"Residue\",fontsize=30)\n",
    "plt.ylabel(\"Average Preference\",fontsize=30)\n",
    "plt.legend(loc = 'best',fontsize=30)\n",
    "#Please uncomment the following line if you'd like to save the figure.\n",
    "#plt.savefig(\"image.png\",bbox_inches = 'tight', dpi=300)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The figure above is a bonus and a nice visualization of the algorithm's output. This figure can be compared to Figure 4 in the 1989 paper. Please note that I overlay $\\lt$Pa$\\gt$,$\\lt$Pb$\\gt$, and $\\lt$Pt$\\gt$ on the same figure (not separately on three separate ones as in Figure 4). I also only display the average preference for the target 43 residues of the Subtilisin BPN' peptide."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
